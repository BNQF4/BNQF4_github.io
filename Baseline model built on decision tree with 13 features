Baseline model built on decision tree with 13 features
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import OneHotEncoder
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeRegressor
# Load the dataset
df = pd.read_excel('D:/Users/admin/Desktop/Original Dataset.xlsx')
# Step 1: Select the features and target variable
features = ['Initial discharge capacity', 'Initial charge capacity', 'First Cycle Coulombic efficiency', 'Testing C rate',
            'Cycles', 'C rate', 'Theoretical Capacity', 'Microstructure', 'Space Group', 'a(Å)', 'b(Å)', 'c(Å)', 'UnitCellVolume']
target = 'Capacity Retention'
# Assuming 'df' is your DataFrame containing the data
X = df[features]
y = df[target]
# Step 2: Apply one-hot encoding to 'Microstructure' and 'Space Group'
X_encoded = pd.get_dummies(X, columns=['Microstructure', 'Space Group'], drop_first=True)
# Step 3: Drop rows with NaN values in both the feature and target columns
df_cleaned = pd.concat([X_encoded, y], axis=1).dropna()
# Separate the cleaned data into X_cleaned and y_cleaned
X_cleaned = df_cleaned.drop(target, axis=1)
y_cleaned = df_cleaned[target]
# Step 4: Split the cleaned data into training and testing sets
# Adjust the test_size and random_state as needed
X_train, X_test, y_train, y_test = train_test_split(X_cleaned, y_cleaned, test_size=0.2, random_state=2565)
# Step 5: Create and train the decision tree regression model
model = DecisionTreeRegressor(random_state=42)
model.fit(X_train, y_train)
# Step 6: Evaluate the model's performance
# Make predictions using the test set
y_pred = model.predict(X_test)
# Calculate the Mean Squared Error (MSE) and R-squared score
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f"Mean Squared Error (MSE): {mse}")
print(f"R-squared score: {r2}")

